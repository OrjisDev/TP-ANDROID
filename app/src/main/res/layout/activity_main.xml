<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/main"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="My Contact Pro&#xA;Version : 1.0&#xA;Rendu&#xA;A rendre un fichier compressé (zip, 7z, rar) contenant :&#xA;•&#xA;Le projet Android Studio contenant l’ensemble des fichiers de la solution et du projet.&#xA;Ou un lien public permettant de récupérer le projet sur un Git.&#xA;Nommer le fichier nom.prenom.zip et mettre celui-ci dans le dossier de rendu prévu à cet effet.&#xA;Application&#xA;L&apos;application My Contact Pro est une application Android qui permettra de gérer une liste de contact&#xA;professionnels.&#xA;Pour chaque contact on devra pouvoir renseigner les informations suivantes :&#xA;-&#xA;Nom&#xA;-&#xA;Prénom&#xA;-&#xA;Société&#xA;-&#xA;Adresse&#xA;-&#xA;Tel&#xA;-&#xA;Adresse mail&#xA;-&#xA;Secteur (Industrie, Informatique, Santé, …)&#xA;-&#xA;Favori (type INTEGER)&#xA;Création du projet avec la base de données&#xA;Créer un nouveau projet MyContactPro sous Android Studio en partant d&apos;une activity vide.&#xA;Ajouter un POJO Contact qui servira de modèle pour stocker les informations d&apos;un contact : id (long),&#xA;nom (String), prenom (String), societe (String), adresse (String), tel (String), email (String), secteur&#xA;(String), favori (int)&#xA;Créer un DAO pour ajouter, récupérer un contact ou une liste de contacts, mettre à jour et supprimer&#xA;un contact.&#xA;Ajouter la classe permettant de créer la base de données et d’accéder au DAO afin de stocker les&#xA;informations d&apos;un contact.&#xA;Ajout d’un contactAjouter un menu sur l&apos;activité principale contenant un item qui permettra d’accéder à l’activité&#xA;AddContactActivity.&#xA;Au clic sur cet item du menu, lancer l’activité AddContactActivity :&#xA;Créer la nouvelle activité AddContactActivity&#xA;La vue comportera 6 EditText, pour le nom, le prénom, la société, l’adresse, le tel et l’email, et un&#xA;spinner pour les secteurs (Industrie, Informatique, Santé, …).&#xA;Au clic sur le bouton ajouter vérifier si tous les champs sont renseignés, afficher un message avec un&#xA;Toast si cela n’est pas le cas.&#xA;Par défaut le champ favori sera à 0.&#xA;Ajouter le contact dans la base de données si tout est bien renseigné.&#xA;Le formulaire devra revenir à la page principale.&#xA;Au clic sur le bouton annuler on revient sur la page principale.&#xA;Ajouter le Go back permettant de revenir sur l’activité précédente.&#xA;Afficher la liste de contacts&#xA;Modifier la vue principale en mettant le RecyclerView qui affichera pour une ligne :Créer le layout pour l’item.&#xA;Créer l’Adapter et mettez à jour la MainActivity pour afficher la liste des contacts stockées dans la&#xA;base de données.&#xA;Navigation vers détails&#xA;Ajouter le système qui permet de traiter le clic sur un item.&#xA;Le clic sur un des items permettra d’amener à un second écran. Celui-ci décrira toutes les&#xA;informations relatives au contact cliqué.&#xA;Pour cela vous pouvez vous inspirer du tuto&#xA;https://stackoverflow.com/questions/49969278/recyclerview-item-click-listener-the-right-way qui&#xA;explique comment traiter un clic sur un item d&apos;un RecyclerView.&#xA;Créer la nouvelle Activité DetailActivity qui correspondra à cet écran :&#xA;Ajouter au clic sur Appeler un appel à un Intent pour téléphoner au contact.&#xA;Ajouter au clic sur SMS un appel à un Intent pour envoyer un SMS au contact.&#xA;Ajouter au clic sur LOCALISER un appel à un Intent pour aller sur la MAP avec l’adresse du contact.&#xA;Liste des Intent courant : https://developer.android.com/guide/components/intents-common?hl=fr&#xA;Créer un nouveau menu qui sera afficher dans cette vue et qui permettra de supprimer et modifier&#xA;un contact.&#xA;Lors de la sélection de l’item delete du menu appeler la méthode delete du DAO et retourner sur la&#xA;page d’accueil.Lors de sélection de l’item update du menu, appeler une nouvelle activité que vous devez créer, qui&#xA;permettra de modifier le contatc passée dans l’intent. Cette activité est quasi identique à l’activité&#xA;AddContactActivity. Il faudra revenir sur la page d’accueil après la mise à jour du contact.&#xA;Dans le détail d’un contact ajouter un bouton « Ajouter aux favoris » qui permettra de mettre un&#xA;contact comme favori.&#xA;Si le contact est dans les favoris modifier le texte du bouton avec « Retirer des favoris ».&#xA;Au clic sur ce bouton mettez à jour le contaact en base de données en mettant la valeur du champ&#xA;Favori à 0 si le contact n’est pas dans les favoris et à 1 si le contact est dans les favoris.&#xA;Ajouter dans le menu de la page d’accueil un item qui quand il sera sélectionné, permettra de filtrer&#xA;la liste en affichant que les contacts favoris. Pour cela rajouter une méthode dans le Dao qui&#xA;permettra de sélectionner les contacts qui ont le champ favori à 1. Appeler cette méthode au clic sur&#xA;l’item du menu et relancer l’affichage du Recyclerview." />

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

</androidx.constraintlayout.widget.ConstraintLayout>